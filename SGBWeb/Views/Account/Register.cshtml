@model SGBWeb.Models.RegisterViewModel
@using SGBWeb.Models
@{
    ViewBag.Title = "Register";
    List<GeneralData> profiles = ViewData["Profile"] as List<GeneralData>;
}

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "Ocorreu um erro ao tentar registar o utilizador!. Corrija os erros e tente novamente")

    <p>
        A senha requer no minimo 6 caractectres!
    </p>

    <div class=" row">
        <div class="form-group col-xs-6 col-md-6 col-lg-6">
            @Html.LabelFor(m => m.Username, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Username, htmlAttributes: new { @class = "form-control", autocomplete = "username" })
            @Html.ValidationMessageFor(m => m.Username, "", htmlAttributes: new { @class = "text-danger" })
        </div>
        <div class=" form-group col-xs-6 col-md-6 col-lg-6">
            @Html.LabelFor(m => m.Name, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Name, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Name, "", htmlAttributes: "text-danger")
        </div>
    </div>
    <div class="row">
        @*@Html.HiddenFor(m => m.Username)*@
        @Html.HiddenFor(m => m.tempEmail)
        <div class="form-group col-xs-6 col-md-6 col-lg-6">
            @Html.Label("Email: ", htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Email, htmlAttributes: new { @type = "email", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-xs-6 col-md-6 col-lg-6">
            @Html.LabelFor(m => m.Phone, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.Phone, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Phone, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="row">
        <div class="form-group col-xs-6 col-md-6 col-lg-6">
            @Html.Label("Senha:", htmlAttributes: new { @class = "control-label" })
            @Html.PasswordFor(m => m.Password, htmlAttributes: new { @class = "form-control", autocomplete = "new-password" })
            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })
        </div>
        <div class="form-group col-xs-6 col-md-6 col-lg-6">
            @Html.Label("Repetir a senha:", htmlAttributes: new { @class = "control-label" })
            @Html.PasswordFor(m => m.ConfirmPassword, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="col-sm-12 col-md-4 col-lg-4">
        <div class="form-group">
            @Html.Label("Perfil", htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"><i class="fa fa-list"></i></span>
                </div>
                @Html.DropDownListFor(m => m.profileUser, new SelectList(profiles, "id", "description"), "Escolha o Perfil...",
                   new
                   {
                       @class = "form-control",
                       @id = "profileId",
                       @name = "profileId",
                       style = "font-size:12px;",
                       //@onchange ="setProfile()",
                       @required = "required"
                   })
            </div>
            <input type="hidden" id="pro" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
